(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{384:function(v,_,l){"use strict";l.r(_);var t=l(5),u=Object(t.a)({},function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("p",[v._v("在软件行业，经常听到：“先设计后实现”，也经常听到：“设计的重要性”。")]),v._v(" "),l("p",[v._v("在软件实现过程中，却往往很难做到。因为大多数实现者在编程的时刻，最关注的是功能的实现，不会考虑太多以后是否易于维护，易于扩展，性能如何等问题。 功能有时候也确实很复杂，连功能的实现都让身为程序员的我们已经焦头烂额，还有空考虑设计之类似乎虚无缥缈的东西？！而一旦该功能成型，迫于项目时间压力，我们会把时间精力立马投入到另一个功能的实现或另一个项目实现中......等到下次修改bug，或增添新的功能的时候，问题就出现了：改一处小小的代码，会影响其他功能，还会引起其他bug。为了更改bug，这时候的程序员反应一般有两种:")]),v._v(" "),l("ul",[l("li",[v._v("在现有代码上改，用全局变量或其它标识来区分之前的和现在的不同情况，结果是代码到处是各种流程，复杂到你自己都看不懂;")]),v._v(" "),l("li",[v._v("把相关代码拷贝一份，保持旧的代码不变（为的是不影响既有功能），简单更改新的代码，结果是重复代码，如果重复代码本身有问题，以后修正这些重复代码的bug就特别容易遗漏，也无形中增加了维护的难度和成本.")])]),v._v(" "),l("p",[v._v("很显然这两种方式，都会使代码越来越糟糕，越来越难以维护，就像一个大热天一直放着的馒头，越变越馊，而身为程序员却还得过个3/5天甚至3/5个月来啃一口这个变馊的馒头。")]),v._v(" "),l("p",[v._v("出现这个问题的一个重要原因是因为没有在合适的时机进行代码重构。")]),v._v(" "),l("p",[v._v("实现功能的时候能够考虑设计原则当然是好，但正如前面说的，有各种原因导致当时进行设计是很难的，而且在没有实现功能的时候，往往看不到这个feature的全貌，即使在实现功能之前就设计，设计也未必就是好的，就能保持一成不变，现实中需求变更也是常态，所以也不能指望一开始的设计就能满足最终的需求。")]),v._v(" "),l("p",[v._v("有两个时机是合适的重构时机：")]),v._v(" "),l("ul",[l("li",[v._v("功能已经完成90%，基本可以看到该feature全貌的时候，在保证通过单元测试的同时，在进行集成测试之前重构代码。")]),v._v(" "),l("li",[v._v("功能完成一段时间，集成测试也过了。但第一次系统测试报了一些bug，在解决第一次bug之前，我们需要审视一下我们即将更改的代码是否需要重构。")])]),v._v(" "),l("p",[v._v("一般遇到以下情况需要警惕，这些强信号在提醒我们：是否需要重构？重构？重构？")]),v._v(" "),l("ol",[l("li",[v._v("要通过很多状态来控制复杂流程")]),v._v(" "),l("li",[v._v("有一个bug，但很难下手改代码")]),v._v(" "),l("li",[v._v("存在重复代码")]),v._v(" "),l("li",[v._v("一个软件实体实现太多功能，比如一个文件上千行代码，一个类、一个函数要翻页好几屏才能看到全貌")])]),v._v(" "),l("p",[v._v("最后再聊下关于如何重构的一点心得，个人觉得比较有效的是使用软件中最最重要的一条原则：“单一职责”这个尺子去度量一下代码。")]),v._v(" "),l("p",[v._v("一般可以按下面的步骤：")]),v._v(" "),l("ul",[l("li",[v._v("显示和业务分离")]),v._v(" "),l("li",[v._v("大模块拆小模块，大文件拆小文件，大函数拆小函数")]),v._v(" "),l("li",[v._v("查找消除重复代码")]),v._v(" "),l("li",[v._v("考察应用场景是否适合特定的软件设计模式")])]),v._v(" "),l("p",[v._v("最后一条中的软件设计模式是业界长期实践经验的精华汇总，如果运用得当，将大大简化、标准化设计，更有利于软件的后期维护。设计模式还是高层次的软件通用沟通语言，当我们采用更抽象的设计模式来沟通软件设计和软件问题时，可以用更简短的语言，达到更清晰的描述具体场景和问题的效果。")]),v._v(" "),l("p",[v._v("在适当时间点稍微多花点时间重构，确保软件设计可用，可持续，可以为项目后续维护节省更多时间，从我个人经验来看重构前后所需维护时间至少相差一个数量级。")])])},[],!1,null,null,null);_.default=u.exports}}]);