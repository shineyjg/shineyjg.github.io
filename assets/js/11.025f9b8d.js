(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{313:function(a,e,t){a.exports=t.p+"assets/img/images.433e477c.jpeg"},314:function(a,e,t){a.exports=t.p+"assets/img/run.e6037a61.jpeg"},315:function(a,e,t){a.exports=t.p+"assets/img/ps.1ca12dda.jpeg"},316:function(a,e,t){a.exports=t.p+"assets/img/ps_a.26946f46.jpeg"},317:function(a,e,t){a.exports=t.p+"assets/img/enter.197bdd0c.jpeg"},318:function(a,e,t){a.exports=t.p+"assets/img/build.a441e438.jpeg"},319:function(a,e,t){a.exports=t.p+"assets/img/insecure.c31a91a5.png"},404:function(a,e,t){"use strict";t.r(e);var s=t(5),r=Object(s.a)({},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"docker简述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker简述","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker简述")]),a._v(" "),s("p",[a._v("Docker是基于Go语言实现的开源应用容器引擎。")]),a._v(" "),s("p",[a._v("Docker通过对应用组件的封装、分发、部署、运行等生命周期的管理，达到应用组件级别的“一次封装，到处运行”。\n这里的应用组件，既可以是Web应用，也可以是一套数据库服务，甚至是一个操作系统或编译器。")]),a._v(" "),s("p",[a._v("Docker由镜像(Image)、容器(Container)、仓库(Registry) 三大核心组成。")]),a._v(" "),s("ul",[s("li",[a._v("镜像： 类似操作系统备份时制作的安装镜像，是操作系统和软件的集合，镜像制作好之后是只读的。")]),a._v(" "),s("li",[a._v("容器：\n"),s("ul",[s("li",[a._v("把镜像代表的系统和软件运行起来就是容器，由一个镜像可以运行多个容器实例。")]),a._v(" "),s("li",[a._v("容器可以被启动、停止、删除。容器之间相互隔离。")]),a._v(" "),s("li",[a._v("容器可以类比为通过系统镜像安装并运行的操作系统和软件。")])])]),a._v(" "),s("li",[a._v("仓库：\n"),s("ul",[s("li",[s("p",[a._v("集中存放镜像文件的地方，有本地仓库和远程仓库。")])]),a._v(" "),s("li",[s("p",[a._v("默认远程仓库是docker官方仓库（对应web地址：https://hub.docker.com ）。")])]),a._v(" "),s("li",[s("p",[a._v("运行容器之前必须有本地镜像，本地镜像不存在，则从远程仓库先拉取镜像到本地。")])]),a._v(" "),s("li",[s("p",[a._v("同名字不同标签的镜像组成了repository。比如")]),a._v(" "),s("ul",[s("li",[a._v("maven:3.3.2")]),a._v(" "),s("li",[a._v("...")]),a._v(" "),s("li",[a._v("maven:3.5.3")]),a._v(" "),s("li",[a._v("maven:latest")])]),a._v(" "),s("p",[a._v("组成了maven镜像repository，所有repository组成仓库。")])])])])]),a._v(" "),s("h2",{attrs:{id:"为什么docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么docker","aria-hidden":"true"}},[a._v("#")]),a._v(" 为什么Docker")]),a._v(" "),s("ul",[s("li",[a._v("更快速的交付和部署环境： 避免开发、测试、运维环境的差异导致的各种问题")]),a._v(" "),s("li",[a._v("更轻松的迁移和扩展： docker容器可以在任何平台一致运行")]),a._v(" "),s("li",[a._v("更简单的软件环境更新管理：通过简单的文本文件Dockerfile管理复杂软件环境的变化")])]),a._v(" "),s("p",[a._v("容器和虚拟机对比")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("特性")]),a._v(" "),s("th",[a._v("容器")]),a._v(" "),s("th",[a._v("虚拟机")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("启动")]),a._v(" "),s("td",[a._v("秒级")]),a._v(" "),s("td",[a._v("分钟级")])]),a._v(" "),s("tr",[s("td",[a._v("磁盘占用")]),a._v(" "),s("td",[a._v("一般MB")]),a._v(" "),s("td",[a._v("一般GB")])]),a._v(" "),s("tr",[s("td",[a._v("性能")]),a._v(" "),s("td",[a._v("接近原生")]),a._v(" "),s("td",[a._v("较差")])]),a._v(" "),s("tr",[s("td",[a._v("系统支持数量")]),a._v(" "),s("td",[a._v("单机可支持上百乃至上千个容器")]),a._v(" "),s("td",[a._v("一般几十个")])])])]),a._v(" "),s("h2",{attrs:{id:"docke实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docke实战","aria-hidden":"true"}},[a._v("#")]),a._v(" docke实战")]),a._v(" "),s("h3",{attrs:{id:"_1-docker安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker安装","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. docker安装")]),a._v(" "),s("p",[a._v("在官网下载docker desktop安装即可，略。")]),a._v(" "),s("h3",{attrs:{id:"_2-实战：列出所有本地镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-实战：列出所有本地镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 实战：列出所有本地镜像")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker images\n")])])]),s("p",[a._v("输出：")]),a._v(" "),s("p",[s("img",{attrs:{src:t(313),alt:"图片",title:"图片"}})]),a._v(" "),s("p",[a._v("注：本文所有命令均在命令行窗口中运行。")]),a._v(" "),s("h3",{attrs:{id:"_3-实战：拉取alpine镜像到本地"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-实战：拉取alpine镜像到本地","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 实战：拉取alpine镜像到本地")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker pull alpine \n")])])]),s("p",[a._v("注：不指定tag，默认latest，相当于：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker pull alpine:latest\n")])])]),s("p",[a._v("注：")]),a._v(" "),s("ul",[s("li",[a._v("alpine是小巧、安全、简单、适合容器使用的linux操作系统。")]),a._v(" "),s("li",[a._v("非常适合作为容器的基础镜像使用，具体见镜像制作章节内容。")]),a._v(" "),s("li",[a._v("最新alpine镜像大小不到5M！具体参见"),s("a",{attrs:{href:"https://www.alpinelinux.org",target:"_blank",rel:"noopener noreferrer"}},[a._v("alpine官网"),s("OutboundLink")],1)]),a._v(" "),s("li",[a._v("如果想查看所有alpine的repository，特别是有哪些版本，可以访问"),s("a",{attrs:{href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("docker hub"),s("OutboundLink")],1),a._v(" 搜索alpine即可")]),a._v(" "),s("li",[a._v("一般不建议latest这个tag，因为latest会随着时间变化，而且latest可能落后其它版本。")])]),a._v(" "),s("h3",{attrs:{id:"_4-实战：拉取maven-3-5-3镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-实战：拉取maven-3-5-3镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 4. 实战：拉取maven 3.5.3镜像")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker pull maven:3.5.3 \n")])])]),s("p",[a._v("注：")]),a._v(" "),s("ul",[s("li",[a._v("拉取下来的镜像会以文件的方式保存在本机电脑中，如果拉取了大量镜像，可能会占用较多的磁盘空间。")]),a._v(" "),s("li",[a._v("除非显式删除本机镜像，镜像会一直保存，即使关机再开机也还存在。")])]),a._v(" "),s("h3",{attrs:{id:"_5-实战：运行alpine镜像的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-实战：运行alpine镜像的容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 5. 实战：运行alpine镜像的容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run --name myalpine -it alpine:3.9.3\n")])])]),s("p",[s("img",{attrs:{src:t(314),alt:"图片",title:"图片"}})]),a._v(" "),s("p",[a._v("注：")]),a._v(" "),s("ul",[s("li",[a._v("首次run，如果本地还没有相关镜像，会自动先拉取镜像")]),a._v(" "),s("li",[a._v("--name指定容器名字后，之后对该容器的操作可以用名字参数来区分，而不用记长而难记的容器id来操作容器。")]),a._v(" "),s("li",[a._v("-it指定以交互模式+伪总端的前台方式运行容器，也就是说容器运行起来之后，已经通过伪终端进入到容器内部，可以和容器交互了。")]),a._v(" "),s("li",[a._v("退出交互模式的容器：在终端输入exit命令。")])]),a._v(" "),s("p",[a._v("如果以后台方式运行：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run --name myalpine -d alpine:3.9.3\n")])])]),s("p",[a._v("会发现容器马上停止了，因为容器后台运行要求容器内部至少有一个前台进程在跑。")]),a._v(" "),s("p",[a._v("在本例中容器内部没有前台进程所以直接退出了。所以说alpine是基础镜像，我们需要在此基础上跑我们的应用程序，最终生成我们自己的镜像。参见后面创建镜像章节内容。")]),a._v(" "),s("h3",{attrs:{id:"_6-实战：-查看正在运行的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-实战：-查看正在运行的容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 6. 实战： 查看正在运行的容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker ps\n")])])]),s("p",[s("img",{attrs:{src:t(315),alt:"图片",title:"图片"}})]),a._v(" "),s("h3",{attrs:{id:"_7-实战：-查看所有容器（包括正在运行的和已经停止的）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-实战：-查看所有容器（包括正在运行的和已经停止的）","aria-hidden":"true"}},[a._v("#")]),a._v(" 7. 实战： 查看所有容器（包括正在运行的和已经停止的）")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker ps -a\n")])])]),s("p",[s("img",{attrs:{src:t(316),alt:"图片",title:"图片"}})]),a._v(" "),s("h3",{attrs:{id:"_8-实战：停止alphine容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-实战：停止alphine容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 8. 实战：停止alphine容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker stop myalpine \n")])])]),s("h3",{attrs:{id:"_9-实战：启动容器（不是从镜像创建，而是已经存在但停止运行的容器）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-实战：启动容器（不是从镜像创建，而是已经存在但停止运行的容器）","aria-hidden":"true"}},[a._v("#")]),a._v(" 9. 实战：启动容器（不是从镜像创建，而是已经存在但停止运行的容器）")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker start myalpine\n")])])]),s("h3",{attrs:{id:"_10-实战：进入容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-实战：进入容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 10. 实战：进入容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker exec -it myalpine sh\n")])])]),s("p",[s("img",{attrs:{src:t(317),alt:"图片",title:"图片"}})]),a._v(" "),s("h3",{attrs:{id:"_11-实战：-重启容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-实战：-重启容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 11. 实战： 重启容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker restart myalpine\n")])])]),s("h3",{attrs:{id:"_12-实战：删除myalpine容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-实战：删除myalpine容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 12. 实战：删除myalpine容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rm myalpine\n")])])]),s("p",[a._v("注： 删除容器之前必须停止容器")]),a._v(" "),s("h3",{attrs:{id:"_13-实战：删除本地alpine镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-实战：删除本地alpine镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 13. 实战：删除本地alpine镜像")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rmi myalpine\n")])])]),s("p",[a._v("注：在删除本地镜像之前，必须删除所有该镜像生成的容器")]),a._v(" "),s("h3",{attrs:{id:"_14-实战：从容器制作镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-实战：从容器制作镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 14. 实战：从容器制作镜像")]),a._v(" "),s("h4",{attrs:{id:"_14-1-启动并进入alpine容器，在容器中执行命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-启动并进入alpine容器，在容器中执行命令","aria-hidden":"true"}},[a._v("#")]),a._v(" 14.1 启动并进入alpine容器，在容器中执行命令")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("apk add --update openssh\n")])])]),s("h4",{attrs:{id:"_14-2-退出容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-2-退出容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 14.2 退出容器")]),a._v(" "),s("h4",{attrs:{id:"_14-3-停止容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-3-停止容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 14.3 停止容器")]),a._v(" "),s("h4",{attrs:{id:"_14-5-创建镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-5-创建镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 14.5 创建镜像")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('docker commit -m "install openssh" myalpine alpine-ssh\n')])])]),s("h4",{attrs:{id:"_14-6-查看镜像是否创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-6-查看镜像是否创建","aria-hidden":"true"}},[a._v("#")]),a._v(" 14.6 查看镜像是否创建")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker images\n")])])]),s("h4",{attrs:{id:"_14-7-从新的镜像启动新容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-7-从新的镜像启动新容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 14.7 从新的镜像启动新容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run --name -it myalphine-ssh alpine-ssh sh\n")])])]),s("p",[a._v("注：第14小节这种方式创建镜像不够灵活，尽量用第15小节的方式创建镜像，这里只要了解即可。")]),a._v(" "),s("h3",{attrs:{id:"_15-从dockerfile制作镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-从dockerfile制作镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 15. 从Dockerfile制作镜像")]),a._v(" "),s("h4",{attrs:{id:"_15-1-创建文件dockerfile，内容如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-创建文件dockerfile，内容如下","aria-hidden":"true"}},[a._v("#")]),a._v(" 15.1 创建文件Dockerfile，内容如下")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('FROM alpine:latest\nMAINTAINER yangjianguang <yangjianguang@zhuojianchina.com>\nRUN apk add --update openssh\nRUN ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N \'\' -t rsa\nRUN sed -i "s/UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g" /etc/ssh/sshd_config && sed -i "s/UsePAM.*/UsePAM no/g" /etc/ssh/sshd_config && sed -i "s/PermitRootLogin.*/PermitRootLogin yes/g" /etc/ssh/sshd_config && sed -i "s/#AuthorizedKeysFile/AuthorizedKeysFile/g" /etc/ssh/sshd_config\nEXPOSE 22\nCMD ["/usr/sbin/sshd","-D"]\n')])])]),s("p",[a._v("注：")]),a._v(" "),s("ul",[s("li",[a._v("FROM指定从哪个基础镜像制作我们自己的镜像")]),a._v(" "),s("li",[a._v("RUN命令安装一些软件")]),a._v(" "),s("li",[a._v("EXPOSE指定暴露到容器外面的端口（这里只是声明容器需要暴露的端口，真正暴露出去还需做显式端口映射：见运行容器时的-p参数或隐式端口映射：见运行容器时的-P参数）")]),a._v(" "),s("li",[a._v("CMD指明容器启动后执行的程序")])]),a._v(" "),s("h4",{attrs:{id:"_15-2-制作镜像，在包含dockerfile的目录的终端中执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-制作镜像，在包含dockerfile的目录的终端中执行","aria-hidden":"true"}},[a._v("#")]),a._v(" 15.2 制作镜像，在包含Dockerfile的目录的终端中执行")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker build -t alpine-ssh .\n")])])]),s("p",[s("img",{attrs:{src:t(318),alt:"图片",title:"图片"}})]),a._v(" "),s("p",[a._v("注：这里生成镜像的时候，没有指定tag，默认为latest，作为最佳实践，最好指定tag为具体版本号字符串。")]),a._v(" "),s("h4",{attrs:{id:"_15-3-查看新生成的镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-查看新生成的镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 15.3 查看新生成的镜像")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker images\n")])])]),s("h4",{attrs:{id:"_15-4-基于新的镜像运行容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-基于新的镜像运行容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 15.4 基于新的镜像运行容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run --name alpine-ssh -p 8122:22 -d alpine-ssh\n")])])]),s("p",[a._v("注：")]),a._v(" "),s("ul",[s("li",[a._v("-p参数进行了端口映射，把本机8122端口映射成容器的22端口")]),a._v(" "),s("li",[a._v("-d以后台方式启动容器")])]),a._v(" "),s("h4",{attrs:{id:"_15-5-进入容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-5-进入容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 15.5 进入容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker exec -it alpine-ssh sh\n")])])]),s("p",[a._v("在容器中执行：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("adduser admin\n    [输入admin密码]\n")])])]),s("h4",{attrs:{id:"_15-6-另起一个终端，ssh远程连接容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-6-另起一个终端，ssh远程连接容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 15.6 另起一个终端，ssh远程连接容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ssh -p 8122 admin@127.0.0.1\n   [输入admin密码]\n")])])]),s("p",[a._v("注：")]),a._v(" "),s("ul",[s("li",[a._v("由于做了端口映射，访问本机8122端口相当与访问容器的22端口")]),a._v(" "),s("li",[a._v("一般不建议在容器中开启ssh：一个原因是安全隐患，另一个原因为了让容器更轻量，更健壮，除了目标应用和必要依赖软件，不建议装任何其它应用软件。")]),a._v(" "),s("li",[a._v("本节只是讲解如何在基础镜像上安装软件，并生成新的镜像原理，再次声明：一般不要在容器中开启ssh！")])]),a._v(" "),s("h2",{attrs:{id:"进阶内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进阶内容","aria-hidden":"true"}},[a._v("#")]),a._v(" 进阶内容")]),a._v(" "),s("h3",{attrs:{id:"_1-文件操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-文件操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. 文件操作")]),a._v(" "),s("p",[a._v("有时候在测试调整容器的时候，需要经常更新容器内文件，可以在宿主机和容器之间进行文件拷贝操作。")]),a._v(" "),s("h4",{attrs:{id:"_1-1-从宿主机拷贝文件或目录到容器内"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-从宿主机拷贝文件或目录到容器内","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.1 从宿主机拷贝文件或目录到容器内")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker cp ./nginx.conf nginx:/etc/nginx/\n")])])]),s("p",[a._v("注：此处最后一个参数冒号之前的nginx是容器名")]),a._v(" "),s("h4",{attrs:{id:"_1-2-从容器拷贝文件或目录到宿主机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-从容器拷贝文件或目录到宿主机","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.2 从容器拷贝文件或目录到宿主机")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker cp nginx:/etc/nginx/nginx.conf ./nginx.conf\n")])])]),s("p",[a._v("注：此处第一个参数冒号之前的nginx是容器名")]),a._v(" "),s("h3",{attrs:{id:"_2-目录映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-目录映射","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 目录映射")]),a._v(" "),s("p",[a._v("有三种典型场景需要进行宿主机和容器之间进行目录映射：")]),a._v(" "),s("ul",[s("li",[a._v("（1）某些开发场景中，源文件所在整个目录都在宿主机，而执行环境在容器，为了方便调试，不用每次拷贝更改的文件到容器，再进行运行调试，可以进行目录映射。这样容器和宿主机共享了目录及其中文件内容。 比如，调试openresty的lua脚本程序，则可以这样启动容器：")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('docker run --name="openresty" -d -p 8080:80 -v /Users/yangjianguang/workspace/zhuojian/microservice/rubiku-vue/openresty:/usr/local/openresty/nginx/project -v /Users/yangjianguang/logs:/usr/local/openresty/nginx/logs -v /Users/yangjianguang/workspace/zhuojian/microservice/openresty-gray/src/gray:/usr/local/openresty/lualib/gray openresty/openresty:1.13.6.2-alpine\n')])])]),s("p",[a._v("注：")]),a._v(" "),s("p",[a._v("这里做了三个目录映射：a. html/css/js静态资源 b. 日志 c. 调试的lua脚本\n这样只要在本机更改静态资源和lua脚本，容器中的nginx进程就能取到最新文件进行调试，调试出错时容器进程输出的日志文件内容也可以直接在宿主机查看。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("（2）容器运行过程中会生成一些文件，我们希望在销毁容器，重新从镜像运行新的容器时（比如由于镜像升级时希望升级容器）不希望这些文件丢失，可以进行目录映射，让容器输出文件的目录映射到宿主机上。")])]),a._v(" "),s("li",[s("p",[a._v("（3）两个容器希望进行目录共享，则可以把宿主机上同一个目录映射到两个容器内。")])])]),a._v(" "),s("h3",{attrs:{id:"_3-镜像仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-镜像仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 镜像仓库")]),a._v(" "),s("p",[a._v("通过docker build或docker commit创建的新镜像经常需要推送到远程镜像仓库中，以便测试、生产等环境拉取镜像并运行容器")]),a._v(" "),s("h4",{attrs:{id:"_3-1-官方仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-官方仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.1 官方仓库")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("（1）在"),s("a",{attrs:{href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://hub.docker.com"),s("OutboundLink")],1),a._v(" 注册帐号，如shineyjg")])]),a._v(" "),s("li",[s("p",[a._v("（2）登录官方仓库")])])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker login -u shineyjg registry.hub.docker.com\n")])])]),s("p",[a._v("这里可以省略registry.hub.docker.com, docker login命令默认连接的就是官方的镜像仓库")]),a._v(" "),s("p",[a._v("注：这里需要输入注册时密码")]),a._v(" "),s("ul",[s("li",[a._v("（3）推送镜像到官方仓库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker push shineyjg/get-started:0.1\n")])])]),s("p",[a._v("其中shineyjg/get-started:0.1时通过docker build或docker commit生成的测试镜像")]),a._v(" "),s("p",[a._v("这里其实省略了仓库地址，默认为官方仓库")]),a._v(" "),s("h4",{attrs:{id:"_3-2-其它仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-其它仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.2 其它仓库")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("（1）在推送镜像到其它仓库之前需要从管理员那里拿到帐号信息，或者仓库本身是开放的，不用登录，则可以略过这一步和下一步")])]),a._v(" "),s("li",[s("p",[a._v("（2) 登录")])])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker login -u [password] [registry-server-address]\n")])])]),s("ul",[s("li",[a._v("（3）生成镜像（要求已经准备好Dockerfile，也可以通过其它方式生成镜像）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker build -t [registry-server-address]/[images-name-and-tag] .\n")])])]),s("ul",[s("li",[a._v("（4）推送")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker push [registry-server-address]/[images-name-and-tag]\n")])])]),s("h4",{attrs:{id:"_3-3-玩转私有仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-玩转私有仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.3 玩转私有仓库")]),a._v(" "),s("ul",[s("li",[a._v("（1）直接启动官方registry镜像容器")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run --name registry -d -p 5000:5000 -v /Users/yangjianguang/sw/dockerregistry/data:/var/lib/registry registry:2.7.1\n")])])]),s("ul",[s("li",[a._v("（2）设置docker，添加非安全registry（本机ip地址为192.168.30.52， 这一步也可以通过修改配置文件daemon.json来实现），并重启docker")])]),a._v(" "),s("p",[s("img",{attrs:{src:t(319),alt:"图片",title:"图片"}})]),a._v(" "),s("ul",[s("li",[a._v("（3）重新给镜像打标签，以便符合格式：[registry-server-address]/[image-name-and-tag]")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker tag alpine:3.9.3 192.168.30.52:5000/alpine:3.9.3\n")])])]),s("ul",[s("li",[a._v("（4）推送镜像到本地仓库")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker push 192.168.30.52:5000/alpine:3.9.3\n")])])]),s("p",[a._v("以后就可以通过本地仓库进行镜像操作，如pull，push。你也可以把你搭建的仓库开放出去（主要是端口开放），让局域网中其它docker客户端来pull或push镜像。")]),a._v(" "),s("h3",{attrs:{id:"_4-查看镜像或容器具体信息，如镜像大小，父镜像，容器ip（需要容器在运行状态），容器目录映射，容器端口映射等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-查看镜像或容器具体信息，如镜像大小，父镜像，容器ip（需要容器在运行状态），容器目录映射，容器端口映射等","aria-hidden":"true"}},[a._v("#")]),a._v(" 4. 查看镜像或容器具体信息，如镜像大小，父镜像，容器ip（需要容器在运行状态），容器目录映射，容器端口映射等")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker inspect [image-id or container-id]\n")])])]),s("p",[a._v("还可以过滤输出，直接拿到想要的数据，如获取容器nginx的ip地址：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker inspect --format '{{ .NetworkSettings.IPAddress }}' nginx  \n")])])])])},[],!1,null,null,null);e.default=r.exports}}]);